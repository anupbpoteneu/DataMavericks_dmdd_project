--Drop Tables
 
 
SET SERVEROUTPUT ON
 
BEGIN
    FOR I IN (
        WITH MYTABLES AS (
            SELECT 'USER_PRODUCT' AS TNAME FROM DUAL
            UNION ALL SELECT 'PAYMENT' FROM DUAL
            UNION ALL SELECT 'ORDER_TABLE' FROM DUAL
            UNION ALL SELECT 'USER_TABLE' FROM DUAL
            UNION ALL SELECT 'WARE_PRODUCT' FROM DUAL
            UNION ALL SELECT 'PRODUCT' FROM DUAL
            UNION ALL SELECT 'PRODUCT_CATEGORY' FROM DUAL
            UNION ALL SELECT 'ROLES' FROM DUAL
            UNION ALL SELECT 'WAREHOUSE' FROM DUAL
        )
        SELECT M.TNAME
        FROM MYTABLES M INNER JOIN USER_TABLES O ON M.TNAME = O.TABLE_NAME
    )
    LOOP
        BEGIN
            DBMS_OUTPUT.PUT_LINE('TABLE NAME TO BE DROPPED: ' || I.TNAME);
            EXECUTE IMMEDIATE 'DROP TABLE ' || I.TNAME;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/
-------------------------------------------
 
--Drop sequences
 
 
--select * from user_sequences;
 
 
SET SERVEROUTPUT ON
 
BEGIN
    FOR I IN (
        WITH MYSEQUENCES AS (
            SELECT 'PAYMENT_ID_SEQ' AS SEQ_NAME FROM DUAL
            UNION ALL SELECT 'PRODUCT_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'USER_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'ROLE_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'ORDER_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'WAREHOUSE_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'CATEGORY_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'USER_PRODUCT_ID_SEQ' FROM DUAL
            UNION ALL SELECT 'WARE_PRODUCT_ID_SEQ' FROM DUAL
        )
        SELECT M.SEQ_NAME
        FROM MYSEQUENCES M INNER JOIN USER_SEQUENCES O ON M.SEQ_NAME = O.SEQUENCE_NAME
    )
    LOOP
        BEGIN
            DBMS_OUTPUT.PUT_LINE('SEQUENCE TO BE DROPPED: ' || I.SEQ_NAME);
            EXECUTE IMMEDIATE 'DROP SEQUENCE ' || I.SEQ_NAME;
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE(SQLERRM);
        END;
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/
 
------------------------------------------------------
 
-- Create Sequences
CREATE SEQUENCE ROLE_ID_SEQ START WITH 1;
CREATE SEQUENCE CATEGORY_ID_SEQ START WITH 1;
CREATE SEQUENCE WAREHOUSE_ID_SEQ START WITH 1;
CREATE SEQUENCE PRODUCT_ID_SEQ START WITH 1;
CREATE SEQUENCE WARE_PRODUCT_ID_SEQ START WITH 1;
CREATE SEQUENCE USER_ID_SEQ START WITH 1;
CREATE SEQUENCE ORDER_ID_SEQ START WITH 1;
CREATE SEQUENCE USER_PRODUCT_ID_SEQ START WITH 1;
CREATE SEQUENCE PAYMENT_ID_SEQ START WITH 1;

----------------------------------------------------
 
-- Create Tables
CREATE TABLE ROLES (
    ROLE_ID NUMBER(6) DEFAULT ROLE_ID_SEQ.NEXTVAL NOT NULL,
    ROLE_NAME VARCHAR2(50) NOT NULL,
    PRIMARY KEY (ROLE_ID)
);
 
CREATE TABLE PRODUCT_CATEGORY (
    CATEGORY_ID NUMBER(6) DEFAULT CATEGORY_ID_SEQ.NEXTVAL NOT NULL,
    CATEGORY_NAME VARCHAR2(100) NOT NULL,
    PRIMARY KEY (CATEGORY_ID)
);
 
CREATE TABLE WAREHOUSE (
    WAREHOUSE_ID NUMBER(6) DEFAULT WAREHOUSE_ID_SEQ.NEXTVAL NOT NULL,
    WAREHOUSE_NAME VARCHAR2(100) NOT NULL,
    TOTAL_CAPACITY NUMBER,
    STREET_ADDRESS VARCHAR2(255),
    ZIP_CODE VARCHAR2(20),
    CITY VARCHAR2(100),
    STATE VARCHAR2(100),
    COUNTRY VARCHAR2(100),
    PRIMARY KEY (WAREHOUSE_ID)
);
 
CREATE TABLE PRODUCT (
    PRODUCT_ID NUMBER(6) DEFAULT PRODUCT_ID_SEQ.NEXTVAL NOT NULL,
    CATEGORY_ID NUMBER(6) NOT NULL,
    PRODUCT_NAME VARCHAR2(100) NOT NULL,
    DESCRIPTION VARCHAR2(255),
    PRODUCT_QUANTITY NUMBER,
    PRODUCT_COST NUMBER,
    PRIMARY KEY (PRODUCT_ID),
    CONSTRAINT PRODUCT_CATEGORY_FK FOREIGN KEY (CATEGORY_ID) REFERENCES PRODUCT_CATEGORY(CATEGORY_ID) ON DELETE CASCADE
);

--create views
 
 
CREATE OR REPLACE VIEW VW_USER_PRODUCT AS
SELECT * FROM USER_PRODUCT;
 
CREATE OR REPLACE VIEW VW_PAYMENT AS
SELECT * FROM PAYMENT;
 
CREATE OR REPLACE VIEW VW_ORDER_TABLE AS
SELECT * FROM ORDER_TABLE;
 
CREATE OR REPLACE VIEW VW_USER_TABLE AS
SELECT * FROM USER_TABLE;
 
CREATE OR REPLACE VIEW VW_WARE_PRODUCT AS
SELECT * FROM WARE_PRODUCT;
 
CREATE OR REPLACE VIEW VW_PRODUCT AS
SELECT * FROM PRODUCT;
 
CREATE OR REPLACE VIEW VW_PRODUCT_CATEGORY AS
SELECT * FROM PRODUCT_CATEGORY;
 
CREATE OR REPLACE VIEW VW_ROLES AS
SELECT * FROM ROLES;
 
CREATE OR REPLACE VIEW VW_WAREHOUSE AS
SELECT * FROM WAREHOUSE;


